import org.apache.tools.ant.filters.ReplaceTokens
buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        google()
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.2.0"
        classpath 'com.google.gms:google-services:4.3.13'
    }
}
plugins {
    id 'org.springframework.boot' version '2.3.9.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
}
apply plugin: "org.sonarqube"
group = 'com.pbs.tech'
version = '1.0'
sourceCompatibility = '11'
repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    google()
}
sonarqube {
    properties {
        property 'sonar.sources', 'src/main/java,src/main/resources'
        // property 'sonar.tests', 'src/test/java'
    }
}
dependencies {
    // Spring core
    implementation("org.springframework.boot:spring-boot-starter-web")
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter'
    // Template layout
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
    implementation("nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect")
    implementation('org.springframework.boot:spring-boot-starter-data-cassandra')
    // Spring security
    implementation('org.springframework.boot:spring-boot-starter-security')
    // Data
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation group: 'com.h2database', name: 'h2', version: '1.4.200'
    // Apache Utils
    implementation 'org.apache.commons:commons-dbcp2:2.1.1'
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    // Test dependencies
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    // Swagger API documentation
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.7.0'
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.7.0'
    // Additional dependencies
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.5'
    implementation group: 'com.itextpdf', name: 'itextpdf', version: '5.0.6'
    implementation group: 'javax.mail', name: 'mail', version: '1.4.7'
    // Firebase Admin
    implementation 'com.google.firebase:firebase-admin:8.1.0'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
}
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    reports {
        junitXml.enabled = true   // Enable XML report generation
        html.enabled = true       // Enable HTML report generation
    }
    ignoreFailures = false       // Fail the build if any tests fail
    failFast = true              // Stop at the first failing test
}
sourceSets {
    main {
        resources {
            exclude 'scripts/faceDetection/extracted_imgs/**'
            exclude 'scripts/faceDetection/face_training/training_imgs/**'
            exclude 'scripts/report/*.pdf'
        }
    }
}
def packageDistribution = copySpec {
    def distroName = "$name-$version"
    into(distroName) {
        new File(buildDir, "$distroName/conf").mkdirs()
        new File(buildDir, "$distroName/bin").mkdirs()
        new File(buildDir, "$distroName/lib").mkdirs()
        new File(buildDir, "$distroName/data").mkdirs()
        new File(buildDir, "$distroName/scripts").mkdirs()
        into('lib') {
            from 'build/libs'
            include '*.jar' // copy the fat jar created by bootRepackage
        }
        into('bin') {
            from 'src/templates'
            include 'start*.template'
            include 'stop*.template'
            filter(ReplaceTokens, tokens: [
                    name: project.name,
                    extra_java_opts_property: project.name.replace('-', '_').toUpperCase() + "_OPTS",
                    extra_java_opts: ' -Dspring.config.location=$APP_HOME/conf/ -Dspring.profiles.active=$1 -DSCRIPT_PATH=$APP_HOME/scripts',
                    version: project.version,
                    generated: new Date().toString()
            ])
            fileMode = 0755
        }
        into('conf') {
            from "src/main/resources/" // custom start script based on startScripts task output
            include '*.yml'
            include 'ilens-ssl.pkcs12'
        }
        into('scripts') {
            from "build/resources/main/scripts/"
            exclude '**/*.jpg'
            include '**/*.py'
            include '**/*.xml'
        }
        into('scripts/report') {
            from "build/resources/main/static/web/images/"
            include 'logo.png'
        }
        into('scripts/rtspServer') {
            from "build/resources/main/scripts/rtspServer/"
            include 'ilensCert.crt'
            include 'ilensKey.key'
        }
        rename("^start-ilens.sh.template\$", "start-ilens.sh")
        rename("^stop-ilens.sh.template\$", "stop-ilens.sh")
    }
}
task releaseTar(type: Tar, dependsOn: ['build']) {
    with packageDistribution
}





















